How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    As its name indicates, diff shows the difference between two files. Knowing
    that one of them have been working correctly, and there is a difference 
    between the two; the bug can not be caused by something else than what 
    have changed.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?


      |	pros
    ==+===============================================
    G | -not too many commits and not so few
    i | -all commits have a purpose, and carry meaning
    t | -have that comment thing. It is good
     -+-----------
    g | -it's automatic; we love to automatize things
    g |
    l |

      |	cons    
    ==+==========
    G | -If you forget committing; you re fucked up
    i | -
    t | -
     -+-----------
    g | -you have commit not very useful
    o | -control so many commits will become difficult
    o |
    g |
    l |
    e |


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Google doc is not intended to edit, for example, codes and programs
    which are usually in multiple files.
    But in the other hand, Git is dedicated for projects that have so many files that are related between them.
    so if you edit one file, you ll have to edit some others.

How can you use the commands git log and git diff to view the history of files?

    the basic usage of the two commands is as the following:
    	-for git log, we use it to print the history of the commits (commit id, the comment.. etc). you can add the option --stat to show how many addition/deletion has been made.
    	-git diff requires the commits to-be-compared ids, and it shows the difference between them, in a great way.

How might using version control make you more confident to make changes that
could break something?

    using version control give you a large control over you files. So you can change them as you want
    knowing that you restore any state of a file in every point of time. You want have to fear to mess the work up.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to version my projects. so I can watch every single change made to them, and so I can "navigate" 
    through in them is different points of time.
